#!/bin/bash
#
# Synchronize and index IMAP email.

set -o errexit
set -o pipefail
set -o nounset

# Global variables.
export MAIL_CONFDIR="${HOME}/.config/mail"

# Fetch all messages for specific account name.
function fetch() {
	local type="$1"

	# Export variables for templates.
	export USERNAME="$2"
	export HOSTNAME="$3"

	# Synchronize and index mail from IMAP server.
	fetch-pre-hook "${USERNAME}"
	mbsync -c <(envsubst < "${MBSYNC_CONFDIR}/${type}.conf") "${USERNAME}"
	fetch-post-hook "${USERNAME}"
}

# Send email message from standard input.
function send() {
	local type="$1"

	# Export variables for templates.
	export USERNAME="$2"
	export HOSTNAME="$3"

	# Add message to the queue.
	local queuedir="${MAIL_DATADIR}/${USERNAME}/.queue"
	local basename=$(date +%Y-%m-%d-%H.%M.%S)

	mkdir -p "${queuedir}"
	cat > "${queuedir}/${basename}.mail"

	# Abort process if we're not online.
	${NETWORK_CONNECTED} || return 0

	# Send all queued email.
	for mail in "${queuedir}"/*.mail
	do
		echo "Sending '${mail}..."

		msmtp -C <(envsubst < "${MSMTP_CONFDIR}/${type}.conf") -t < "${mail}"
		[[ $? -ne 0 ]] && return 1

		rm "${mail}"
	done
}

# Setup account configuration for `notmuch`, `mbsync`, `msmtp` etc.
function account-setup() {
	local account="$1"

	# Create or load user configuration.
	if [[ ! -e "${MAIL_CONFDIR}/account.d/${account}.conf" ]]
	then
		mkdir -p "${MAIL_CONFDIR}/account.d"
		cp "${MAIL_CONFDIR}/account.conf.template" "${MAIL_CONFDIR}/account.d/${account}.conf"

		read -r -p "Press enter to edit user configuration for '${account}': "
		${EDITOR:=vi} "${MAIL_CONFDIR}/account.d/${account}.conf"

		echo "Please enter password for '${account}': "
		secret-tool store --label "mail-sync ${account}" mail.sync.user "${account}"
	else
		echo "Using existing configuration file for '${account}'..."
	fi

	load-account-config "${account}" || return 1
	account-setup-post-hook "${account}"

	# Work around a bug in Astroid JSON handling, where object keys containing
	# periods are incorrectly broken into sub-objects.
	export ACCOUNT_NAME=$(tr '.@' '-' <<< "${USERNAME}")

	if [[ -e "${ASTROID_CONFDIR}/config" ]]
	then
		local cmd=".[0].accounts = (.[0].accounts + .[1]) | .[0]"
		local tmp=$(jq -s "${cmd}" "${ASTROID_CONFDIR}/config" <(jq -r ".accounts" "${ASTROID_CONFDIR}/config.template" | envsubst))
		echo "${tmp}" > "${ASTROID_CONFDIR}/config"
	else
		envsubst < "${ASTROID_CONFDIR}/config.template" > "${ASTROID_CONFDIR}/config"
	fi

	echo "Setup complete."
}

# Checks if local account exists, and returns 0 if true, 1 if false.
function account-exists() {
	local account="$1"

	if [[ ! -e "${MAIL_CONFDIR}/account.d/${account}.conf" ]]
	then
		echo "Configuration for account '${account}' not found."
		echo "Did you intend to run 'add' instead?"
		return 1
	fi
}

# Load configuration file for account into current environment.
function load-account-config() {
	local account="$1"

	# Check if account exists and exit if not.
	account-exists "${account}" || return 1
	mkdir -p "${MAIL_DATADIR}/${account}"

	# Load account configuration.
	set -o allexport
	source "${MAIL_CONFDIR}/account.d/${account}.conf"
	set +o allexport

	# Load backend library.
	if [[ ! -e "${MAIL_LIBDIR}/${BACKEND}" ]]
	then
		echo "Configuration for backend '${BACKEND}' not found."
		echo "Make sure you specified a valid backend for the account."
		return 1
	fi

	source "${MAIL_LIBDIR}/${BACKEND}"
}

# Load configuration file common to all accounts.
function load-global-config() {
	if [[ ! -e "${MAIL_CONFDIR}/mail.conf" ]]
	then
		echo "Configuration file in '${MAIL_CONFDIR}/mail.conf' not found."
		return 1
	fi

	set -o allexport
	source "${MAIL_CONFDIR}/mail.conf"
	set +o allexport
}

# Lock process for concurrent runs of `mail-sync`.
function lock() {
	# Check for existing process and lock if none exists.
	mkdir -p "${MAIL_DATADIR}"

	[[ -e "${MAIL_DATADIR}/.lock" ]] && return 1
	touch "${MAIL_DATADIR}/.lock" || return 1

	# Remove lock on exit.
	trap "rm -f ${MAIL_DATADIR}/.lock" EXIT
}

# Print usage information for `mail-sync`.
function usage() {
	echo -e "Usage: mail-sync COMMAND [USERNAME]\n"
	echo -e "Commands:"
	echo -e "  fetch  Fetch emails from remote server."
	echo -e "  send   Send any queued emails."
	echo -e "  setup  Initialize settings for new account."

	return 1
}

# The entry point for the `mail-sync` command.
function main() {
	local action="${1:-}"
	local account="${2:-}"

	# Check for valid command name.
	[[ -z "${action}" ]] && usage

	# Check for account name parameter.
	if [[ -z "${account}" ]]
	then
		echo "Error: Please specify an account name to fetch from."
		exit 1
	fi

	load-global-config && lock

	case "${action}" in
		fetch)
			load-account-config "${account}"
			fetch "${TYPE}" "${USERNAME}" "${SMTP_HOSTNAME}"
			;;
		send)
			load-account-config "${account}"
			send "${TYPE}" "${USERNAME}" "${SMTP_HOSTNAME}"
			;;
		setup)
			account-setup "${account}"
			;;
		*)
			usage
	esac
}

# Process command-line options and execute correct sub-command.
main $@
