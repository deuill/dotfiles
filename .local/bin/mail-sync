#!/bin/bash
#
# Synchronize and index IMAP email.

set -o errexit

# Global variables.

export MAIL_CONFDIR="${HOME}/.config/mail"

# Export all variables in global configuration automatically.
set -o allexport
source "${MAIL_CONFDIR}/config.global"
set +o allexport

# Fetch all messages for specific account name.
function fetch() {
	local type="$1"

	# Export variables for templates.
	export USERNAME="$2"
	export HOSTNAME="$3"

	# Local folders to sync between before and after fetching new emails.
	local paths=$(sort <<< "$(find ${MAIL_DATADIR}/${USERNAME} -name "cur" -type d -exec dirname '{}' \;)")

	for path in ${paths}
	do
		local folder="${path#${MAIL_DATADIR}/}"
		local tag="$(echo ${path#${MAIL_DATADIR}/${USERNAME}/} | tr -s '[:upper:]/. ' '[:lower:]-')"

		# Copy all messages into the corresponding folder for their tag.
		local ids=$(notmuch search --output=messages tag:"${tag}" NOT folder:"${folder}" NOT tag:"new")
		for id in ${ids}
		do
			local files=$(notmuch search --output=files "${id}")
			while read file
			do
				# Copy file to correct folder.
				if [[ -e "${file}" ]]
				then
					echo "Copied message from '${file}' to '${path}/cur'"
					mkdir -p "${path}/cur"
					cp "${file}" "${path}/cur"
					break
				fi
			done <<< "${files}"
		done <<< "${ids}"

		# Remove all messages with no tags corresponding to their folders.
		local ids=$(notmuch search --output=messages folder:"${folder}" NOT tag:"${tag}" NOT tag:"new")
		for id in ${ids}
		do
			local files=$(notmuch search --output=files "${id}")
			while read file
			do
				# Remove file from folder.
				if [[ -e "${file}" ]]
				then
					echo "Removed message file '${file}'"
					rm "${file}"
					break
				fi
			done <<< "${files}"
		done
	done <<< "${paths}"

	# Synchronize and index mail from IMAP server.
	mbsync -c <(envsubst < "${MBSYNC_CONFDIR}/config.${type}") "${USERNAME}"
	notmuch --config="${NOTMUCH_CONFDIR}/config" new

	for path in ${paths}
	do
		local folder="${path#${MAIL_DATADIR}/}"
		local tag="$(echo ${path#${MAIL_DATADIR}/${USERNAME}/} | tr -s '[:upper:]/. ' '[:lower:]-')"

		# Tag new messages with specific folder name tag if none is set already.
		notmuch tag +"${tag}" folder:"${folder}" NOT tag:"${tag}"

		# Remove tags from messages that have been moved/deleted/retagged etc.
		notmuch tag -"${tag}" tag:"${tag}" NOT folder:"${folder}" NOT folder:"trash"
	done

	# Remove 'new' tag and add 'unread' tag to all new messages.
	notmuch tag -"new" +"unread" tag:"new"

	# Remove 'unread' tag from messages in 'Sent' folder.
	notmuch tag -"unread" folder:"sent"
}

function send() {
	local type="$1"

	# Export variables for templates.
	export USERNAME="$2"
	export HOSTNAME="$3"

	# Add message to the queue.
	local queuedir="${MAIL_DATADIR}/${USERNAME}/.queue"
	local basename=$(date +%Y-%m-%d-%H.%M.%S)

	mkdir -p "${queuedir}"
	cat > "${queuedir}/${basename}.mail"

	# Abort process if we're not online.
	local state=$(connmanctl state | grep 'State' | awk '{print $3}')
	[[ "${state}" != "online" ]] && return

	# Send all queued email.
	for mail in "${queuedir}"/*.mail
	do
		echo "Sending '${mail}..."
		msmtp -C <(envsubst < "${MSMTP_CONFDIR}/config.${type}") "${USERNAME}" < "${mail}"
		if [[ $? -eq 0 ]]
		then
			echo "Success"
			rm "${mail}"
		else
			echo "Failure"
		fi
	done
}

# Show notification for all new messages.
function notify() {
	local count=$(notmuch count is:"inbox" tag:"not-notified")

	if [[ ${count} -gt 0 ]]
	then
		if [[ ${count} -gt 10 ]]
		then
			local title="Inbox"
			local text=$(printf "%d new messages" ${count})
		else
			local summary=$(notmuch search --limit=1 --format="json" is:"inbox" tag:"not-notified")

			local title=$(jq -r .[0].authors <<< "${summary}")
			local text=$(jq -r .[0].subject <<< "${summary}")

			if [[ ${count} -gt 1 ]]
			then
				text=$(printf "%s (%d more messages)" "${text}" $((${count} - 1)))
			fi
		fi

		notify-send "${title}" "${text}"
	fi

	notmuch tag -"not-notified" tag:"not-notified"
}

function setup() {
	local account="$1"

	# Create or load user configuration.
	if [[ ! -e "${MAIL_CONFDIR}/account.d/${account}" ]]
	then
		mkdir -p "${MAIL_CONFDIR}/account.d"
		cp "${MAIL_CONFDIR}/config.template" "${MAIL_CONFDIR}/account.d/${account}"

		read -p "Press enter to edit user configuration for '${account}': "
		[[ -z "${EDITOR}" ]] && EDITOR="nano"
		${EDITOR} "${MAIL_CONFDIR}/account.d/${account}"

		echo "Please enter password for '${account}': "
		secret-tool store --label "mail-sync ${account}" mail.sync.user "${account}"
	else
		echo "Using existing configuration file for '${account}'..."
	fi

	load_config "${account}"
	lock "${account}"

	mkdir -p "${MAIL_DATADIR}/${account}"

	envsubst < "${NOTMUCH_CONFDIR}/config.template" > "${NOTMUCH_CONFDIR}/config"
	ln -sf "${NOTMUCH_CONFDIR}/config" ~/.notmuch-config
	notmuch --config="${NOTMUCH_CONFDIR}/config" new &> /dev/null

	envsubst < "${ASTROID_CONFDIR}/config.template" > "${ASTROID_CONFDIR}/config"
	echo "Setup complete."
}

function load_config() {
	local account="$1"

	if [[ ! -e "${MAIL_CONFDIR}/account.d/${account}" ]]
	then
		echo "Configuration for account '${account}' not found."
		echo "Did you intend to run 'setup' instead?"
		exit 1
	fi

	set -o allexport
	source "${MAIL_CONFDIR}/account.d/${account}"
	set +o allexport
}

function lock() {
	local account="$1"

	# Check for existing process and lock if none exists.
	[[ -e "${MAIL_DATADIR}/${account}/.lock" ]] && exit
	touch "${MAIL_DATADIR}/${account}/.lock" || exit

	# Remove lock on exit.
	trap "rm -f ${MAIL_DATADIR}/${account}/.lock" EXIT
}

function usage() {
	echo -e "Usage: mail-sync COMMAND [USERNAME]\n"
	echo -e "Commands:"
	echo -e "  fetch  Fetch emails from remote server."
	echo -e "  send   Send any queued emails."
	echo -e "  setup  Setup default account settings."
}


if [[ -z "$1" ]]
then
	usage
	exit 1
fi

action="$1"

if [[ -z "$2" ]]
then
	echo "Error: Please specify an account name to fetch from."
	exit 1
fi

account="$2"

case ${action} in
fetch)
	load_config "${account}"
	lock "${account}"

	fetch "${TYPE}" "${USERNAME}" "${SMTP_HOSTNAME}" && notify
	;;
send)
	load_config "${account}"
	lock "${account}"

	send "${TYPE}" "${USERNAME}" "${SMTP_HOSTNAME}"
	;;
setup)
	setup "${account}"
	;;
*)
	usage
	exit 1
esac
