#!/usr/bin/env bash

set -euo pipefail
set -o nounset

## Prints a message to standard error.
function log() {
	printf "%s\n" "${1}" >&2
}

## Fetch and process content for URL given, returning any content to standard output.
## Parameter: URL to process.
## Standard Output: The raw HTML for the URL given.
function fetch-url() {
	local url="${1}"
	local tmpfile

	tmpfile=$(mktemp)
	wget --quiet --convert-links -O "${tmpfile}" "${url}"

	cat "${tmpfile}" && rm "${tmpfile}"
}

## Determine and return human-readable title for title, corresponding to given URL.
## Parameter: URL corresponding to raw HTML given.
## Standard Input: The raw HTML content to process.
## Standard Output: The human-readable title for the content, if any.
function content-title() {
	local url="${1}"
	if test "${READABLE}" = "true" -a -z "$(which readable)"; then
		log "Command 'readable' not found, please install 'readability-cli' package..."
		exit 1
	elif test "${READABLE}" = "true"; then
		cat | readable --quiet --base "${url}" --low-confidence force --properties title
	else
		cat | awk -F '<title>|</title>' '$0 ~ "<title>" {print $2; exit}'
	fi
}

## Process the raw HTML input, as corresponding to the URL given, to a format suitable for emailing.
## Parameter: URL corresponding to raw HTML given.
## Standard Input: The raw HTML content to process.
## Standard Output: The processed HTML content, suitable for emailing.
function content-html() {
	local url="${1}"
	if test "${READABLE}" = "true" -a -z "$(which readable)"; then
		log "Command 'readable' not found, please install 'readability-cli' package..."
		exit 1
	elif test "${READABLE}" = "true"; then
		cat | readable --quiet --base "${url}" --low-confidence force --properties html-content
	else
		cat
	fi
}

## Return a file name used for writing the resulting email template.
## Standard Output: The filename used for writing the email template.
function output-file() {
	local filename
	if test -z "${OUTPUT_FILE}" -a -z "${OUTPUT_DIRECTORY}"; then
		log "No output file or directory specified, exiting..."
		exit 1
	elif test -n "${OUTPUT_DIRECTORY}" -a -z "${title}"; then
		log "No title specified with directory output, exiting..."
		exit 1
	elif test "${OUTPUT_FILE}" = "-"; then
		printf "/dev/stdout"
	elif test -n "${OUTPUT_FILE}"; then
		printf "%s" "${OUTPUT_FILE}"
	else
		filename=$(printf "%s" "${1}" | tr -cs '[:alnum:]' '-' | tr '[:upper:]' '[:lower:]')
		printf "%s/%s.eml" "${OUTPUT_DIRECTORY}" "${filename}"
	fi
}

## Return command-line usage information for this script.
function usage() {
	echo "Usage: web-to-email [OPTION...] [URL]"
	echo "Options:"
	echo "  -o=<path>, --output=<path>     Output email content to specific path. Use '-' for standard output."
	echo "  -d=<dir>,  --directory=<dir>   Output email content to specific directory, using auto-generated name."
	echo "  -r         --readable          Use 'readability-cli' to capture content from URL."
	echo "  -h         --help              Show this help text."
	return 1
}

## Process and produce email template from given URL.
## Parameter: URL to process.
function main() {
	local url="${1}"
	local base title plain html boundary filename

	log "Loading content from URL '${url}'..."
	base=$(fetch-url "${url}")
	if test -z "${base}"; then
		log 'No content found for URL, exiting...'
		exit 2
	fi

	log 'Extracting title from content...'
	title=$(content-title "${url}" <<< "${base}")
	if test -z "${title}"; then
		log 'No eligible title found for content, exiting...'
		exit 2
	fi

	log 'Extracting HTML body from content...'
	html=$(content-html "${url}" <<< "${base}")

	log 'Extracting plain text body from content...'
	plain=$(pandoc --from html --to plain --reference-links  <<< "${html}")

	log 'Making HTML self-contained...'
	html=$(pandoc --self-contained --metadata title="${title}" <<< "${html}")

	filename=$(output-file "${title}")
	boundary=$(head -c 100 /dev/urandom | tr -cd '[:alnum:]')

	log "Writing email content to '${filename}'..."
	cat <<- EOF > "${filename}"
		From: "Web-to-Email" <webtoemail@localhost>
		Subject: ${title}
		Mime-Version: 1.0
		Content-Type: multipart/alternative; boundary="${boundary}"

		--${boundary}
		Content-Type: text/plain; charset="utf-8"
		Mime-Version: 1.0

		${plain}

		--${boundary}
		Content-Type: text/html; charset="utf-8"
		Mime-Version: 1.0

		${html}
		--${boundary}--
	EOF
}

# Set configuration defaults.
OUTPUT_FILE=""
OUTPUT_DIRECTORY="$(pwd)"
READABLE="false"

# Parse any additional command-line arguments.
for i in "$@"; do
	case $i in
		-o=*|--output=*)
			OUTPUT_FILE="${i#*=}"
			;;
		-d=*|--directory=*)
			OUTPUT_DIRECTORY="${i#*=}"
			;;
		-r|--readable)
			READABLE="true"
			;;
		-h|--help)
			usage
			exit 0
			;;
	esac
done

# Execute main command.
main "${!#:-}"
exit $?
