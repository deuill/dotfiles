#!/bin/bash

set -o pipefail
set -o nounset

# Function definitions

function defaults-set() {
	WIDTH="1280"
	HEIGHT="720"
}

function defaults-set-droidcamx() {
	MODULE_NAME="v4l2loopback"
	MODULE_ARGS="card_name=Phonecam"
	# MODULE_NAME="v4l2loopback_dc"
	# MODULE_ARGS="width=${WIDTH} height=${HEIGHT}"

	HOST="127.0.0.1"
	PORT="4747"

	STREAM_BACKEND="gstreamer"
	# STREAM_BACKEND="droidcam-cli"

	VIDEO_URL="http://$HOST:$PORT/mjpegfeed?${WIDTH}x${HEIGHT}"
	VIDEO_SYNC="false"

	GSTREAMER_VIDEO_PARAMS="video/x-raw,width=$WIDTH,height=$HEIGHT"

	PACKAGE="com.dev47apps.droidcamx"
	INTENT="com.dev47apps.droidcamx.DroidCamX"
}

function defaults-set-ipwebcam() {
	MODULE_NAME="v4l2loopback"
	MODULE_ARGS="card_name=Phonecam"

	HOST="127.0.0.1"
	PORT="8080"

	VIDEO_URL="http://$HOST:$PORT/video"
	VIDEO_SYNC="false"

	AUDIO_URL="http://$HOST:$PORT/audio.wav"
	AUDIO_SYNC="false"

	GSTREAMER_VIDEO_PARAMS="video/x-raw,width=$WIDTH,height=$HEIGHT"
	GSTREAMER_AUDIO_PARAMS="audio/x-raw,format=S16LE,layout=interleaved,rate=44100,channels=1"

	PULSEAUDIO_AUDIO_PARAMS="format=S16LE channels=1"
}

function backend-check-droidcamx() {
	case "$STREAM_BACKEND" in
		gstreamer)
			gstreamer-check
		    ;;
		droidcam-cli)
			ps -C droidcam-cli &> /dev/null
		    ;;
		*)
			echo "Unknown stream backend '$STREAM_BACKEND' selected"
			return 1
			;;
	esac
	return $?
}

function backend-start-droidcamx() {
	echo "Starting '${INTENT}'..."
	$ADB shell am start -n $PACKAGE/$INTENT || return $?
	sleep 2

	case "$STREAM_BACKEND" in
		gstreamer)
			echo "Starting GStreamer..."
			gstreamer-video-start &
			sleep 2 && backend-check-droidcamx
		    ;;
		droidcam-cli)
			echo "Starting 'droidcam-cli'..."
			droidcam-cli $HOST $PORT &
		    ;;
		*)
			echo "Unknown stream backend '$STREAM_BACKEND' selected"
			return 1
			;;
	esac
	return $?
}

function backend-stop-droidcamx() {
	case "$STREAM_BACKEND" in
		gstreamer)
			gstreamer-stop
		    ;;
		droidcam-cli)
			echo "Stopping 'droidcam-cli'..."
			killall droidcam-cli
		    ;;
		*)
			echo "Unknown stream backend '$STREAM_BACKEND' selected"
			return 1
			;;
	esac

	echo "Stopping '$PACKAGE'..."
	$ADB shell am force-stop $PACKAGE
}

function backend-check-ipwebcam() {
	gstreamer-check
	return $?
}

function backend-start-ipwebcam() {
	# Start Pulseaudio pipeline.
	pulseaudio-start || return $?

	# Start audio and video pipeline.
	gstreamer-video-start &
	gstreamer-audio-start &

	sleep 2 && backend-check-ipwebcam
	return $?
}

function backend-stop-ipwebcam() {
	echo "Stopping Gstreamer..."
	gstreamer-stop

	echo "Unloading Pulseaudio modules..."
	pulseaudio-stop

	return 0
}

function gstreamer-video-start() {
	local device="$(gstreamer-get-device)" || return $?
	gst-launch-1.0 souphttpsrc location="$VIDEO_URL" do-timestamp=true is-live=true ! multipartdemux ! decodebin ! videoconvert ! videoscale ! "$GSTREAMER_VIDEO_PARAMS" ! v4l2sink device=$device sync="$VIDEO_SYNC"
	return 0
}

function gstreamer-audio-start() {
	local device="$(gstreamer-get-device)" || return $?
	gst-launch-1.0 souphttpsrc location="$AUDIO_URL" do-timestamp=true is-live=true ! "$GSTREAMER_AUDIO_PARAMS" ! queue ! pulsesink device="phonecam" sync="$AUDIO_SYNC"
	return 0
}

function gstreamer-check() {
	echo "$(ps -C gst-launch-1.0 -o command )" | grep -q -e "souphttpsrc" -e "$VIDEO_URL"
	return $?
}

function gstreamer-stop() {
	kill $(echo "$(ps -C gst-launch-1.0 -o pid,command)" | awk '/souphttpsrc|$HOST:$PORT/ {print $1}')
}

function gstreamer-get-device() {
	for d in /dev/video*; do
		echo "$(v4l2-ctl -d $d -D)" | grep -q 'v4l2 loopback' && {
			echo "$d"
			return 0
		}
	done

	echo "No 'v4l2loopback' device found"
	return 1
}

function pulseaudio-start() {
	local default=$(pacmd dump | awk '/set-default-sink/ {print $2}')

	pactl load-module module-null-sink sink_name="phonecam" sink_properties="device.description='Phonecam'" $PULSEAUDIO_AUDIO_PARAMS
	pactl load-module module-echo-cancel sink_name="phonecam_echo_cancel" source_master="phonecam.monitor" sink_master="$default" $PULSEAUDIO_AUDIO_PARAMS aec_method="webrtc" save_aec=true use_volume_sharing=true
	pactl set-default-source phonecam.monitor

	return 0
}

function pulseaudio-stop() {
	pactl unload-module $(pulseaudio-sink-by-name "phonecam_echo_cancel")
	pactl unload-module $(pulseaudio-sink-by-name "phonecam")
	return 0
}

function pulseaudio-sink-by-name() {
	pacmd list-sinks | awk "/name: <$1>/ {f=1; next} f && /module:/ {print \$2; exit}"
}

function module-check() {
	# Check if module is loaded. Echo is needed here to avoid SIGPIPE.
	echo "$(lsmod)" | grep -q "$MODULE_NAME" && return 0

	# Check if module is available.
	modinfo -F=null "$MODULE_NAME" || return 2

	# Module is available but not loaded.
	return 1
}

function module-load() {
	# Check for module availability.
	module-check && return 0 || [[ $? -eq 2 ]] && return 2

	# Module is not loaded but is available, try to load.
	sudo modprobe "$MODULE_NAME" "$MODULE_ARGS"
	return $?
}

function module-unload() {
	# Check for module availability.
	module-check || return 1

	# Unload module.
	sudo rmmod $MODULE_NAME
	return $?
}

function adb-device-check() {
	echo "$($ADB get-state)" | grep -q "device"
	return $?
}

function adb-connection-check() {
	echo "$($ADB forward --list)" | grep -q "tcp:${PORT} tcp:${PORT}"
	return $?
}

function phonecam-start() {
	module-check || {
		echo "Loading module '$MODULE_NAME' with 'modprobe'..."
		module-load || return $?
	}

	adb-device-check || {
		echo "Device not set up for 'adb' connection."
		return 1
	}

	adb-connection-check || {
		echo "Forwarding port '$PORT' to local..."
		$ADB forward tcp:$PORT tcp:$PORT || return $?
	}

	backend-check-${BACKEND} || backend-start-${BACKEND} || return $?
	return 0
}

function phonecam-stop() {
	backend-check-${BACKEND} && backend-stop-${BACKEND}

	adb-connection-check && {
		echo "Removing port forward for '$PORT'..."
		$ADB forward --remove tcp:$PORT
	}

	module-check && {
		echo "Unloading module '$MODULE_NAME'..."
		module-unload
	}

	return 0
}

function phonecam-status() {
	local module=$(module-check && echo 'loaded' || { [[ $? -eq 2 ]] && echo 'not-found'; } || echo 'not-loaded')
	local device=$(adb-device-check && echo 'connected' || echo 'not-connected')
	local connection=$(adb-connection-check && echo 'forwarded' || echo 'not-forwarded')
	local server=$(backend-check-${BACKEND} && echo 'started' || echo 'not-started')

	echo "Module:     $module"
	echo "Device:     $device"
	echo "Connection: $connection"
	echo "Server:     $server"

	return 0
}

function usage() {
	echo "Usage: phonecam [COMMAND]"
	echo "Commands:"
	echo "  start  Start and connect to phone server."
	echo "  stop   Stop and disconnect from any running phone server."
	echo "  status Show status of phone server and connection."
	return 1
}

# Global configuration

BACKEND="droidcamx"
ADB="adb"

# Set configuration defaults.
defaults-set

# Set defaults for selected backend.
case "${BACKEND}" in
	droidcamx)
		defaults-set-droidcamx
		;;
	ipwebcam)
		defaults-set-ipwebcam
		;;
	*)
		echo "Invalid backend selected: '${BACKEND}'"
		exit 1
esac

# Execute action given.
case "${1:-}" in
	start)
		phonecam-start
		;;
	stop)
		phonecam-stop
		;;
	status)
		phonecam-status
		;;
	*)
		usage
		;;
esac

exit $?
