#
# Configuration for Aerc.
#

[general]

# Enable the embedded terminal to output OSC 8 (hyperlinks) escape sequences. Not all terminal
# emulators handle OSC 8 sequences properly and can produce confusing results, disable this setting
# if that occurs.
enable-osc8 = true

[ui]

# Enable mouse events in the ui, e.g. clicking and scrolling with the mousewheel
mouse-enabled = true

# Display the directory list as a foldable tree.
dirlist-tree = true

# Uncomment to use box-drawing characters for vertical and horizontal borders.
border-char-vertical = "┃"
border-char-horizontal = "━"

# Sets the styleset to use for the aerc UI elements.
styleset-name = base16-default

# Activates fuzzy search in commands and their arguments: the typed string is
# searched in the command or option in any position, and need not be
# consecutive characters in the command or option.
fuzzy-complete = true

# Uncomment to use UTF-8 symbols to indicate PGP status of messages
icon-unencrypted =
icon-encrypted = ✔
icon-signed = ✔
icon-signed-encrypted = ✔
icon-unknown = ✘
icon-invalid = ⚠

# Enable a threaded view of messages. If this is not supported by the backend (IMAP server or
# notmuch), threads will be built by the client.
threading-enabled = true

[compose]

# Specifies the command to run the editor with. It will be shown in an embedded
# terminal, though it may also launch a graphical window if the environment
# supports it. Defaults to $EDITOR, or vi.
editor = nano --syntax markdown --zero --softwrap --atblanks --restricted --saveonexit

# When set, aerc will generate "format = flowed" bodies with a content type of
# "text/plain; format = flowed" as described in RFC3676. This format is easier to
# handle for some mailing software, and generally just looks like ordinary
# text. To actually make use of this format's features, you'll need support in
# your editor.
format-flowed = false

[multipart-converters]

# Converters allow to generate multipart/alternative messages by converting the
# main text/plain part into any other MIME type. Only exact MIME types are
# accepted. The commands are invoked with sh -c and are expected to output
# valid UTF-8 text.
text/html = cmark --to html --safe --smart

[filters]

# Filters allow you to pipe an email body through a shell command to render
# certain emails differently, e.g. highlighting them with ANSI escape codes.
#
# The commands are invoked with sh -c. The following folders are appended to
# the system $PATH to allow referencing filters from their name only:
#
#   ${XDG_CONFIG_HOME:-~/.config}/aerc/filters
#   ${XDG_DATA_HOME:-~/.local/share}/aerc/filters
#   $PREFIX/share/aerc/filters
#   /usr/share/aerc/filters
#
# The following variables are defined in the filter command environment:
#
#   AERC_MIME_TYPE      the part MIME type/subtype
#   AERC_FORMAT         the part content type format =  parameter
#   AERC_FILENAME       the attachment filename (if any)
#   AERC_SUBJECT        the message Subject header value
#   AERC_FROM           the message From header value
#
# The first filter which matches the email's mimetype will be used, so order
# them from most to least specific.
#
# You can also match on non-mimetypes, by prefixing with the header to match
# against (non-case-sensitive) and a comma, e.g. subject,text will match a
# subject which contains "text". Use header,~regex to match against a regex.
text/plain    = colorize | wrap
text/calendar = calendar
text/html     = elinks -dump | colorize

image/*         = chafa --polite on --colors full --preprocess on --symbols all
application/pdf = pdftotext -nopgbrk -layout - -

message/delivery-status = colorize
message/rfc822          = colorize

# This special filter is only used to post-process email headers when
# [viewer].show-headers = true
# By default, headers are piped directly into the pager.
.headers = colorize

[hooks]

# Executed when a new email arrives in the selected folder
mail-received = notify-send "New mail from $AERC_FROM_NAME" "$AERC_SUBJECT"
