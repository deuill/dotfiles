#!/bin/bash

# -------------
# User settings
# -------------

source "${HOME}/.config/i3/statusbar/config"

# ---------------
# Utility methods
# ---------------

source "${HOME}/.config/i3/statusbar/utils"

# -------------
# Program start
# -------------

if [ "${#}" -eq 0 ]
then
	cat <<-EOM
		Error: No applets selected. Please enter a list of applets to be
		displayed with bar. Remember that applets are displayed as entered.

		Example: ${0} cpu memory clock

		This will start bar with cpu, memory and clock applets displayed in
		left to right order as entered.
	EOM

	exit 1
fi

# Cleanup on exit.
trap 'quit 0' EXIT

# Signals USR1 and USR2 should only be caught by applets.
trap '' USR1 USR2

# Create temporary directory for files shared by this statusbar instance.
mkdir -p "${TEMP_PATH}" "${EVENT_PATH}"

# Open output pipe and keep open forever.
mkfifo "${TEMP_PATH}/output"
while true; do sleep infinity; done >> "${TEMP_PATH}/output" &

# Applet index, used for ordering output.
index=0

for applet in "${@}"
do
	if [ ! -f "${APPLET_PATH}/${applet}" ]
	then
		echo "Error: applet file '${APPLET_PATH}/${applet}' not found."
		quit 2
	fi

	# Initialize applet and send all output to output pipe. The applet method is
	# run in an infinite loop, so applets need to handle throttling themselves.
	(
		# Applet-local update function. Sends the text argument passed to the
		# running bar instance for rendering.
		output() {
			read -d '' json <<-_EOF_
				{
					"name": "${applet}",
					"full_text": "${1}"
				},
			_EOF_

			echo ${index}:${json} >> "${TEMP_PATH}/output"
		}

		# Execute optional cleanup function on exit.
		trap 'cleanup' EXIT

		# Load applet file.
		source "${APPLET_PATH}/${applet}"

		# Only attempt to handle click events if onclick handler is defined for
		# this applet.
		if [ $(type -t onclick) = 'function' ]
		then
			# Create events pipe, used for sending click events through to applets.
			mkfifo "${EVENT_PATH}/${applet}"
			while true; do sleep infinity; done >> "${EVENT_PATH}/${applet}" &

			# Handle click events asynchronously.
			(
				while read line < "${EVENT_PATH}/${applet}"
				do
					button=$(echo ${line} | jq -r '.button')
					onclick "${button}" "${line}" &
				done
			) &
		fi

		# Run default applet action in an infinite loop. Applets are supposed to
		# handle intervals in their default actions, otherwise they run the risk
		# taxing the CPU.
		while :
		do
			${applet}
		done
	) > /dev/null 2>&1 &

	index=$((${index} + 1))
done

# Update i3bar with applet output asynchronously.
(
	# Send the header so that i3bar knows we're using JSON.
	echo '{"version": 1, "click_events": true}'

	# Begin the endless array.
	echo '['

	# Send an empty array to make the loop simpler.
	echo '[],'

	# Read from output pipe and build JSON output from segments.
	while read line < "${TEMP_PATH}/output"
	do
		segments["${line%%:*}"]="${line#*:}"
		string="${segments[@]}"

		echo "[${string:0:-1}],"
	done
) &

# Handle statusbar clicks and send to correct applet.
cat | while read line
do
	# Find applet name from JSON output line.
	applet=$(echo "${line#,}" | jq -r '.name')

	# Send JSON line to applet event handler, if any exists.
	if [ -p "${EVENT_PATH}/${applet}" ]
	then
		echo "${line#,}" >> "${EVENT_PATH}/${applet}"
	fi
done

# Unreachable quit statement.
quit 255
