#!/bin/bash

# -------------
# User settings
# -------------

source "${HOME}/.config/i3/statusbar/config"

# ---------------
# Utility methods
# ---------------

bar() {
	# Bar length.
	length="${2:-10}"

	# Print full segments.
	full=$((${1} / ${length}))
	for i in $(seq 1 ${full})
	do
		printf '\u2588'
	done

	# Print remaining empty segments.
	empty=$(((100 - ${1}) / ${length}))
	for i in $(seq 0 ${empty})
	do
		printf '\u2591'
	done
}

icon() {
	printf "\u${1}"
}

quit() {
	echo "Quitting..."

	# Kill all child processes.
	pkill -TERM -P $$

	# Clean up shared resources.
	rm -R "${TEMP_PATH}"

	# Exit with defined code.
	exit ${1:-0}
}

# -------------
# Program start
# -------------

if [ "${#}" -eq 0 ]
then
	cat <<-EOM
		Error: No applets selected. Please enter a list of applets to be
		displayed with bar. Remember that applets are displayed as entered.

		Example: ${0} cpu memory clock

		This will start bar with cpu, memory and clock applets displayed in
		left to right order as entered.
	EOM

	exit 1
fi

# Cleanup on exit.
trap 'quit 0' EXIT

# Signals USR1 and USR2 should only be caught by applets.
trap '' USR1 USR2

# Create temporary directory and files.
mkdir -p "${TEMP_PATH}"
mkfifo "${TEMP_PATH}/output"

# Keep output pipe open forever. This is done in order to prevent EOF under all
# circumstances.
while true; do sleep infinity; done > "${TEMP_PATH}/output" &

# Applet index, used for ordering output.
index=0

for applet in "${@}"
do
	if [ ! -f "${APPLET_PATH}/${applet}" ]
	then
		echo "Error: applet file '${APPLET_PATH}/${applet}' not found."
		quit 2
	fi

	# Initialize applet and send all output to output pipe. The applet method is
	# run in an infinite loop, so applets need to handle throttling themselves.
	(
		# Applet-local update function. Sends the text argument passed to the
		# running bar instance for rendering.
		output() {
			echo "${index}:${1}" >> "${TEMP_PATH}/output"
		}

		# Load applet file.
		source "${APPLET_PATH}/${applet}"

		# Run default applet action in an infinite loop. Applets are supposed to
		# handle internals in their default actions, otherwise they run the risk
		# of taxing the CPU.
		while :
		do
			${applet}
		done
	) > /dev/null 2>&1 &

	index=$((${index} + 1))
done

# Send the header so that i3bar knows we're using JSON.
echo '{"version": 1}'

# Begin the endless array.
echo '['

# Send an empty array to make the loop simpler.
echo '[],'

# Read from output pipe and build JSON output from segments.
while read line < "${TEMP_PATH}/output"
do
	segments["${line%%:*}"]="{\"full_text\": \"${line#*:}\"},"
	string="${segments[@]}"

	echo "[${string:0:-1}],"
done

# Unreachable quit statement.
quit 255
