#!/bin/bash
# Session management script for i3.

ACTION=$1

LOCKERS=("xflock4" "light-locker")
SESSION_DIR="${HOME}/.cache/i3/session"

function session--get-tree() {
	local num="$1"

	read -r -d '' cleanup <<-'EOM'
		NR == 1      {next}               # Skip first line in document.
		$0 ~ "// \"title" {next}          # Skip title match for window.
		$0 ~ "// \"" {sub("// \"", "\"")} # Uncomment window definitions.
		$0 ~ "//"    {next}               # Remove all other comments
		{gsub("\\\\", ""); print}         # Remove all backslash escapes.
	EOM

	awk "${cleanup}" <<< $(i3-save-tree --workspace ${num}) | jq -sr '.'
}

function session--get-commands() {
	local tree="$1"
	local commands=()

	local selector='.. | .swallows? | .[]? | .instance + .class'
	local windows=$(wmctrl -l -p -x)

	# Clean window instance and class names.
	read -r -d '' cleanup <<-'EOM'
		 {gsub("\\$\\^", "."); print substr($0, 3, length($0) - 4)}
	EOM

	local classes=$((jq "${selector}" | awk "${cleanup}") <<< "${tree}")

	while read class
	do
		local info=$(awk '$4 ~ "'${class}'" {print $1 " " $3; exit}' <<< "${windows}")

		local id=$(awk '{print $1}' <<< "${info}")
		local pid=$(awk '{print $2}' <<< "${info}")

		local title=$(awk -F'"' '$1 ~ "_NET_WM_NAME" {print $2}' <<< $(xprop -id "${id}"))
		local cmd=$(ps -p "${pid}" -o args --no-headers)

		commands+='{"title":"'"${title}"'","cmd":"'"${cmd}"'"}'
	done <<< "${classes}"

	jq -sr '.' <<< "${commands[@]}"
}

# Save session state for future restoration.
function session-save() {
	local layout=()
	local commands=()

	# Save layout for each workspace in turn.
	local workspaces=$(i3-msg -t get_workspaces)

	for i in $(seq 0 $(($(jq -r '. | length' <<< "${workspaces}") - 1)))
	do
		local num=$(jq -r ".[$i].num" <<< "${workspaces}")

		# Get layout for workspace.
		layout[$i]=$(session--get-tree "${num}")

		# Get list of running commands for workspace.
		commands[$i]=$(session--get-commands "${layout[$i]}")
	done

	# Create layout cache space and save state files.
	mkdir -p "${SESSION_DIR}"

	jq -r '.' <<< '{
	    "layout":    '$(jq -sr '.' <<< "${layout[@]}")',
	    "commands":  '$(jq -sr '.' <<< "${commands[@]}")',
	    "workspaces":'"${workspaces[@]}"'
	}' > "${SESSION_DIR}/session.json"
}

# Restore previously saved session.
function session-restore() {
	local session=$(cat "${SESSION_DIR}/session.json")
	local temp=$(mktemp)

	# Restore layout and running commands for each workspace.
	for i in $(seq 0 $(($(jq -r '.workspaces | length' <<< "${session}") - 1)))
	do
		local name=$(jq -r ".workspaces[$i].name" <<< "${session}")
		local output=$(jq -r ".workspaces[$i].output" <<< "${session}")

		jq -r ".layout[$i]" <<< "${session}" > "${temp}"
		i3-msg "workspace ${name}; append_layout ${temp}; move workspace to ${output}"

		# Run all commands for workspace.
		for c in $(seq 0 $(($(jq -r ".commands[$i] | length" <<< "${session}") - 1)))
		do
			exec $(jq -r ".commands[$i][$c].cmd" <<< "${session}") &
		done
	done

	# Move back to first workspace.
	i3-msg "workspace "$(jq -r '.workspaces[0].name' <<< "${session}")

	# Clean up temporary files.
	rm -f "${temp}"
}

# Lock screen with i3lock.
function session-lock() {
	# Suspend notifications while locked.
	killall -SIGUSR1 dunst

	# Unsuspend notifications on exit.
	trap 'killall -SIGUSR2 dunst' exit

	# Iterate through list of supporter lockers and choose based on precedence.
	for locker in ${LOCKERS[@]}
	do
		# Do not attempt to use non-existing locker.
		if [ "x$(which ${locker})" == "x" ]
		then
			continue
		fi

		# Lock screen using locker command.
		case "${locker}" in
			light-locker)
				light-locker-command -l
				;;
			*)
				${locker}
				;;
		esac

		# Return early if locker command succeeded.
		if [ $? -eq 0 ]
		then
			return
		fi
	done
}

case ${ACTION} in
	save)
		session-save
		;;
	restore)
		session-restore
		;;
	lock)
		session-lock
		;;
	suspend)
		session-lock
		systemctl suspend
		;;
	logout)
		session-save
		i3-msg exit
		;;
	reboot)
		session-save
		systemctl reboot
		;;
	poweroff)
		session-save
		systemctl poweroff -i
		;;
	*)
		echo 'Unknown command, please use one of the following:'
		echo "'lock', 'suspend', 'logout', 'reboot', 'poweroff'"
		;;
esac
